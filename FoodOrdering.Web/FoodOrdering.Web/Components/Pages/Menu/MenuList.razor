@page "/menu"
@using FoodOrdering.Shared.Models
@using FoodOrdering.Web.Services
@using Microsoft.JSInterop
@inject IFoodOrderingService Service
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="p-8">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold tracking-tight">Menu Items</h1>
        <a href="/menu/new" class="inline-flex items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow hover:bg-primary/90">
            Add New Item
        </a>
    </div>

    @if (menuItems == null)
    {
        <div class="flex justify-center items-center min-h-[200px]">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
        </div>
    }
    else if (!menuItems.Any())
    {
        <div class="rounded-lg border border-muted bg-card p-8 text-center">
            <h3 class="text-lg font-semibold mb-2">No menu items found</h3>
            <p class="text-sm text-muted-foreground">Get started by adding a new menu item.</p>
        </div>
    }
    else
    {
        <div class="rounded-md border">
            <table class="w-full">
                <thead>
                    <tr class="border-b bg-muted/50">
                        <th class="h-12 px-4 text-left align-middle font-medium">Name</th>
                        <th class="h-12 px-4 text-left align-middle font-medium">Description</th>
                        <th class="h-12 px-4 text-left align-middle font-medium">Price</th>
                        <th class="h-12 px-4 text-left align-middle font-medium">Category</th>
                        <th class="h-12 px-4 text-left align-middle font-medium">Status</th>
                        <th class="h-12 px-4 text-left align-middle font-medium">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in menuItems)
                    {
                        <tr class="border-b transition-colors hover:bg-muted/50">
                            <td class="p-4">@item.Name</td>
                            <td class="p-4">@item.Description</td>
                            <td class="p-4">@item.Price.ToString("C")</td>
                            <td class="p-4">
                                <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold bg-secondary text-secondary-foreground">
                                    @item.Category
                                </span>
                            </td>
                            <td class="p-4">
                                <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold @(item.IsAvailable ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                    @(item.IsAvailable ? "Available" : "Unavailable")
                                </span>
                            </td>
                            <td class="p-4">
                                <div class="flex gap-2">
                                    <a href="/menu/edit/@item.Id" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-primary/90 h-9 px-4 py-2 bg-primary text-primary-foreground shadow">
                                        Edit
                                    </a>
                                    <button @onclick="() => DeleteItem(item.Id)" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-destructive/90 h-9 px-4 py-2 bg-destructive text-destructive-foreground shadow">
                                        Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<FoodMenuItem>? menuItems;

    protected override async Task OnInitializedAsync()
    {
        await LoadMenuItems();
    }

    private async Task LoadMenuItems()
    {
        menuItems = await Service.GetMenuItemsAsync();
    }

    private async Task DeleteItem(int id)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?"))
        {
            var success = await Service.DeleteMenuItemAsync(id);
            if (success)
            {
                await LoadMenuItems();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to delete the item. Please try again.");
            }
        }
    }
}