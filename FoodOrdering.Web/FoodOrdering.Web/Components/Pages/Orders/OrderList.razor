@page "/orders"
@using FoodOrdering.Shared.Models
@using FoodOrdering.Shared.Enums
@using FoodOrdering.Web.Services
@inject IFoodOrderingService Service
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="p-8">
    <div class="max-w-7xl mx-auto">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold tracking-tight">Orders</h1>

            <!-- Order Status Filter -->
            <div class="flex gap-2">
                @foreach (var status in Enum.GetValues<OrderStatus>())
                {
                    <button @onclick="() => FilterByStatus(status)"
                            class="@GetStatusButtonClass(status)">
                        @status.ToString()
                    </button>
                }
                @if (selectedStatus.HasValue)
                {
                    <button @onclick="ClearFilter"
                            class="px-3 py-1 rounded-md text-sm border hover:bg-muted">
                        Clear
                    </button>
                }
            </div>
        </div>

        @if (orders == null)
        {
            <div class="flex justify-center items-center min-h-[200px]">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            </div>
        }
        else if (!orders.Any())
        {
            <div class="rounded-lg border border-muted bg-card p-8 text-center">
                <h3 class="text-lg font-semibold mb-2">No orders found</h3>
                <p class="text-sm text-muted-foreground">
                    @(selectedStatus.HasValue
                        ? $"No orders with status: {selectedStatus}"
                        : "No orders have been placed yet.")
                </p>
            </div>
        }
        else
        {
            <div class="rounded-lg border">
                <table class="w-full">
                    <thead>
                        <tr class="border-b bg-muted/50">
                            <th class="h-12 px-4 text-left align-middle font-medium">Order ID</th>
                            <th class="h-12 px-4 text-left align-middle font-medium">Date</th>
                            <th class="h-12 px-4 text-left align-middle font-medium">Customer</th>
                            <th class="h-12 px-4 text-left align-middle font-medium">Items</th>
                            <th class="h-12 px-4 text-left align-middle font-medium">Total</th>
                            <th class="h-12 px-4 text-left align-middle font-medium">Status</th>
                            <th class="h-12 px-4 text-left align-middle font-medium">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in orders)
                        {
                            <tr class="border-b transition-colors hover:bg-muted/50">
                                <td class="p-4">#@order.Id</td>
                                <td class="p-4">@order.OrderDate.ToLocalTime().ToString("g")</td>
                                <td class="p-4">
                                    <div>@order.CustomerName.FullName</div>
                                    <div class="text-sm text-muted-foreground">@order.CustomerPhone</div>
                                </td>
                                <td class="p-4">@order.Items.Count items</td>
                                <td class="p-4">@order.TotalAmount.ToString("C")</td>
                                <td class="p-4">
                                    <span class="@GetStatusBadgeClass(order.Status)">
                                        @order.Status.ToString()
                                    </span>
                                </td>
                                <td class="p-4">
                                    <div class="flex gap-2">
                                        <button @onclick="() => ViewOrder(order.Id)"
                                                class="btn-primary">
                                            View
                                        </button>
                                        <button @onclick="() => UpdateStatus(order)"
                                                class="btn-secondary">
                                            Update Status
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private List<Order>? orders;
    private OrderStatus? selectedStatus;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        orders = await Service.GetOrdersAsync();
        if (selectedStatus.HasValue)
        {
            orders = orders.Where(o => o.Status == selectedStatus.Value).ToList();
        }
    }

    private async Task FilterByStatus(OrderStatus status)
    {
        selectedStatus = status;
        await LoadOrders();
    }

    private async Task ClearFilter()
    {
        selectedStatus = null;
        await LoadOrders();
    }
    
    private string GetStatusButtonClass(OrderStatus status) =>
        status == selectedStatus
            ? "px-3 py-1 rounded-md text-sm bg-primary text-primary-foreground"
            : "px-3 py-1 rounded-md text-sm border hover:bg-muted";

    private string GetStatusBadgeClass(OrderStatus status) => status switch
    {
        OrderStatus.Pending => "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold bg-yellow-100 text-yellow-800",
        OrderStatus.Confirmed => "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold bg-blue-100 text-blue-800",
        OrderStatus.Ready => "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold bg-green-100 text-green-800",
        OrderStatus.Completed => "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold bg-gray-100 text-gray-800",
        OrderStatus.Cancelled => "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold bg-red-100 text-red-800",
        _ => "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold bg-gray-100 text-gray-800"
    };

    private void ViewOrder(int id)
    {
        NavigationManager.NavigateTo($"/orders/{id}");
    }

    private async Task UpdateStatus(Order order)
    {
        // Auto-progress to next status for testing
        var newStatus = (OrderStatus)(((int)order.Status + 1) % 5); // Cycles through all statuses
    
        var success = await Service.UpdateOrderStatusAsync(order.Id, newStatus);
        if (success)
        {
            await LoadOrders(); // Refresh the list
        }
    }
}