@page "/reports"
@using FoodOrdering.Shared.Models
@using FoodOrdering.Shared.Enums
@using FoodOrdering.Web.Services
@inject IFoodOrderingService Service
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="p-8">
    <div class="max-w-7xl mx-auto">
        <h1 class="text-3xl font-bold tracking-tight mb-8">Reports & Analytics</h1>

        @if (isLoading)
        {
            <div class="flex justify-center items-center min-h-[200px]">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            </div>
        }
        else
        {
            <!-- Summary Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <!-- Total Orders -->
                <div class="rounded-lg border p-6">
                    <div class="flex flex-col">
                        <span class="text-sm font-medium text-muted-foreground">Total Orders</span>
                        <span class="text-2xl font-bold">@metrics.TotalOrders</span>
                        <span class="text-sm text-@(metrics.OrdersChange >= 0 ? "green" : "red")-600 mt-2">
                            @(metrics.OrdersChange >= 0 ? "↑" : "↓") @Math.Abs(metrics.OrdersChange)% from last period
                        </span>
                    </div>
                </div>

                <!-- Total Revenue -->
                <div class="rounded-lg border p-6">
                    <div class="flex flex-col">
                        <span class="text-sm font-medium text-muted-foreground">Total Revenue</span>
                        <span class="text-2xl font-bold">@metrics.TotalRevenue.ToString("C")</span>
                        <span class="text-sm text-@(metrics.RevenueChange >= 0 ? "green" : "red")-600 mt-2">
                            @(metrics.RevenueChange >= 0 ? "↑" : "↓") @Math.Abs(metrics.RevenueChange)% from last period
                        </span>
                    </div>
                </div>

                <!-- Average Order Value -->
                <div class="rounded-lg border p-6">
                    <div class="flex flex-col">
                        <span class="text-sm font-medium text-muted-foreground">Average Order Value</span>
                        <span class="text-2xl font-bold">@metrics.AverageOrderValue.ToString("C")</span>
                        <span class="text-sm text-muted-foreground mt-2">
                            Based on @metrics.TotalOrders orders
                        </span>
                    </div>
                </div>

                <!-- Completion Rate -->
                <div class="rounded-lg border p-6">
                    <div class="flex flex-col">
                        <span class="text-sm font-medium text-muted-foreground">Order Completion Rate</span>
                        <span class="text-2xl font-bold">@metrics.CompletionRate.ToString("P1")</span>
                        <span class="text-sm text-muted-foreground mt-2">
                            @metrics.CompletedOrders completed orders
                        </span>
                    </div>
                </div>
            </div>

            <!-- Popular Items Table -->
            <div class="rounded-lg border mb-8">
                <div class="p-6 border-b">
                    <h2 class="text-lg font-semibold">Popular Items</h2>
                </div>
                <div class="p-6">
                    <table class="w-full">
                        <thead>
                            <tr class="border-b">
                                <th class="text-left pb-4">Item</th>
                                <th class="text-right pb-4">Orders</th>
                                <th class="text-right pb-4">Quantity Sold</th>
                                <th class="text-right pb-4">Revenue</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in popularItems)
                            {
                                <tr class="border-b last:border-0">
                                    <td class="py-4">
                                        <div class="font-medium">@item.Name</div>
                                        <div class="text-sm text-muted-foreground">@item.Category</div>
                                    </td>
                                    <td class="py-4 text-right">@item.OrderCount</td>
                                    <td class="py-4 text-right">@item.QuantitySold</td>
                                    <td class="py-4 text-right">@item.Revenue.ToString("C")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Status Distribution -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
                <!-- Status Chart -->
                <div class="rounded-lg border p-6">
                    <h2 class="text-lg font-semibold mb-4">Order Status Distribution</h2>
                    <div class="space-y-4">
                        @foreach (var status in Enum.GetValues<OrderStatus>())
                        {
                            var count = statusDistribution.GetValueOrDefault(status);
                            var percentage = metrics.TotalOrders > 0 ? (double)count / metrics.TotalOrders : 0;
                            <div>
                                <div class="flex justify-between text-sm mb-1">
                                    <span>@status.ToString()</span>
                                    <span>@count (@percentage.ToString("P1"))</span>
                                </div>
                                <div class="w-full bg-gray-200 rounded-full h-2">
                                    <div class="@GetStatusBarClass(status) rounded-full h-2"
                                         style="width: @(percentage * 100)%">
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Time Statistics -->
                <div class="rounded-lg border p-6">
                    <h2 class="text-lg font-semibold mb-4">Time Statistics</h2>
                    <div class="space-y-4">
                        <div>
                            <div class="text-sm text-muted-foreground mb-1">Average Time to Completion</div>
                            <div class="text-2xl font-bold">@metrics.AverageCompletionTime.ToString(@"hh\:mm")</div>
                        </div>
                        <div>
                            <div class="text-sm text-muted-foreground mb-1">Busiest Time of Day</div>
                            <div class="text-2xl font-bold">@metrics.BusiestTime:00</div>
                        </div>
                        <div>
                            <div class="text-sm text-muted-foreground mb-1">Orders Today</div>
                            <div class="text-2xl font-bold">@metrics.OrdersToday</div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


    }


        @code {
            private bool isLoading = true;
            private ReportMetrics metrics = new();
            private List<PopularItemMetric> popularItems = new();
            private Dictionary<OrderStatus, int> statusDistribution = new();

            protected override async Task OnInitializedAsync()
            {
                await LoadReportData();
            }

            private async Task LoadReportData()
            {
                isLoading = true;

                try
                {
                    var orders = await Service.GetOrdersAsync();

                    // Calculate metrics
                    metrics = CalculateMetrics(orders);
                    popularItems = CalculatePopularItems(orders);
                    statusDistribution = CalculateStatusDistribution(orders);
                }
                finally
                {
                    isLoading = false;
                }
            }

            private ReportMetrics CalculateMetrics(List<Order> orders)
            {
                var today = DateTime.UtcNow.Date;
                var completedOrders = orders.Where(o => o.Status == OrderStatus.Completed).ToList();

                return new ReportMetrics
        {
            TotalOrders = orders.Count,
            TotalRevenue = orders.Sum(o => o.TotalAmount),
            AverageOrderValue = orders.Any() ? orders.Average(o => o.TotalAmount) : 0,
            CompletedOrders = completedOrders.Count,
            CompletionRate = orders.Any() ? (double)completedOrders.Count / orders.Count : 0,
            OrdersToday = orders.Count(o => o.OrderDate.Date == today),
            OrdersChange = CalculatePercentageChange(
                orders.Count(o => o.OrderDate >= today.AddDays(-7)),
                orders.Count(o => o.OrderDate >= today.AddDays(-14) && o.OrderDate < today.AddDays(-7))
            ),
            RevenueChange = CalculatePercentageChange(
                orders.Where(o => o.OrderDate >= today.AddDays(-7)).Sum(o => o.TotalAmount),
                orders.Where(o => o.OrderDate >= today.AddDays(-14) && o.OrderDate < today.AddDays(-7)).Sum(o => o.TotalAmount)
            ),
            AverageCompletionTime = CalculateAverageCompletionTime(completedOrders),
            BusiestTime = CalculateBusiestHour(orders)
        };
            }

            private List<PopularItemMetric> CalculatePopularItems(List<Order> orders)
            {
                return orders.SelectMany(o => o.Items)
                    .GroupBy(i => i.MenuItem)
                    .Where(g => g.Key != null)
                    .Select(g => new PopularItemMetric
            {
                Name = g.Key!.Name,
                Category = g.Key.Category,
                OrderCount = g.Select(i => i.OrderId).Distinct().Count(),
                QuantitySold = g.Sum(i => i.Quantity),
                Revenue = g.Sum(i => i.Quantity * i.UnitPrice)
            })
                    .OrderByDescending(x => x.Revenue)
                    .Take(5)
                    .ToList();
            }

            private Dictionary<OrderStatus, int> CalculateStatusDistribution(List<Order> orders)
            {
                return Enum.GetValues<OrderStatus>()
                    .ToDictionary(
                        status => status,
                        status => orders.Count(o => o.Status == status)
                    );
            }

            private double CalculatePercentageChange(decimal current, decimal previous)
            {
                if (previous == 0) return 100;
                return (double)((current - previous) / previous * 100);
            }

            private TimeSpan CalculateAverageCompletionTime(List<Order> completedOrders)
            {
                if (!completedOrders.Any()) return TimeSpan.Zero;

                // var totalMinutes = completedOrders.Average(o => 
                //     (o.CompletedDate ?? o.OrderDate).Subtract(o.OrderDate).TotalMinutes);
                var totalMinutes = 5;
                return TimeSpan.FromMinutes(totalMinutes);
    }

    private int CalculateBusiestHour(List<Order> orders)
    {
        if (!orders.Any()) return 12; // Default to noon

        return orders.GroupBy(o => o.OrderDate.Hour)
            .OrderByDescending(g => g.Count())
            .First()
            .Key;
    }

    private string GetStatusBarClass(OrderStatus status) => status switch
    {
        OrderStatus.Pending => "bg-yellow-500",
        OrderStatus.Confirmed => "bg-blue-500",
        OrderStatus.Ready => "bg-green-500",
        OrderStatus.Completed => "bg-gray-500",
        OrderStatus.Cancelled => "bg-red-500",
        _ => "bg-gray-500"
    };

    private class ReportMetrics
    {
        public int TotalOrders { get; set; }
        public decimal TotalRevenue { get; set; }
        public decimal AverageOrderValue { get; set; }
        public int CompletedOrders { get; set; }
        public double CompletionRate { get; set; }
        public int OrdersToday { get; set; }
        public double OrdersChange { get; set; }
        public double RevenueChange { get; set; }
        public TimeSpan AverageCompletionTime { get; set; }
        public int BusiestTime { get; set; }
    }

    private class PopularItemMetric
    {
        public string Name { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public int OrderCount { get; set; }
        public int QuantitySold { get; set; }
        public decimal Revenue { get; set; }
    }
}
