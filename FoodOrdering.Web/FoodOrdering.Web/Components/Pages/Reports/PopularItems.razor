@page "/reports/popular"
@using FoodOrdering.Shared.Models
@using FoodOrdering.Web.Services
@inject IFoodOrderingService Service
@rendermode InteractiveServer

<div class="p-8">
    <div class="max-w-7xl mx-auto">
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-3xl font-bold tracking-tight">Popular Items</h1>
            <div class="flex gap-4">
                <select @bind="selectedPeriod" class="rounded-md border px-3 py-2">
                    <option value="7">Last 7 days</option>
                    <option value="30">Last 30 days</option>
                    <option value="90">Last 90 days</option>
                    <option value="0">All time</option>
                </select>
                <button @onclick="RefreshData" class="btn-secondary">
                    Refresh
                </button>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="flex justify-center items-center min-h-[200px]">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            </div>
        }
        else
        {
            <!-- Top Items Overview -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <!-- Most Ordered Item -->
                <div class="rounded-lg border p-6 bg-white">
                    <h3 class="text-sm font-medium text-muted-foreground mb-4">Most Ordered Item</h3>
                    @if (topItems.Any())
                    {
                        var mostOrdered = topItems.OrderByDescending(x => x.OrderCount).First();
                        <div>
                            <div class="font-bold text-xl mb-1">@mostOrdered.Name</div>
                            <div class="text-sm text-muted-foreground mb-2">@mostOrdered.Category</div>
                            <div class="flex justify-between text-sm">
                                <span>Total Orders:</span>
                                <span class="font-medium">@mostOrdered.OrderCount</span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span>Quantity Sold:</span>
                                <span class="font-medium">@mostOrdered.QuantitySold</span>
                            </div>
                        </div>
                    }
                </div>

                <!-- Highest Revenue Item -->
                <div class="rounded-lg border p-6 bg-white">
                    <h3 class="text-sm font-medium text-muted-foreground mb-4">Highest Revenue Item</h3>
                    @if (topItems.Any())
                    {
                        var highestRevenue = topItems.OrderByDescending(x => x.Revenue).First();
                        <div>
                            <div class="font-bold text-xl mb-1">@highestRevenue.Name</div>
                            <div class="text-sm text-muted-foreground mb-2">@highestRevenue.Category</div>
                            <div class="flex justify-between text-sm">
                                <span>Total Revenue:</span>
                                <span class="font-medium">@highestRevenue.Revenue.ToString("C")</span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span>Average Price:</span>
                                <span class="font-medium">@highestRevenue.AveragePrice.ToString("C")</span>
                            </div>
                        </div>
                    }
                </div>

                <!-- Top Category -->
                <div class="rounded-lg border p-6 bg-white">
                    <h3 class="text-sm font-medium text-muted-foreground mb-4">Top Category</h3>
                    @if (categoryMetrics.Any())
                    {
                        var topCategory = categoryMetrics.OrderByDescending(x => x.Revenue).First();
                        <div>
                            <div class="font-bold text-xl mb-1">@topCategory.Category</div>
                            <div class="text-sm text-muted-foreground mb-2">@topCategory.ItemCount items</div>
                            <div class="flex justify-between text-sm">
                                <span>Total Revenue:</span>
                                <span class="font-medium">@topCategory.Revenue.ToString("C")</span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span>Total Orders:</span>
                                <span class="font-medium">@topCategory.OrderCount</span>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Popular Items Table -->
            <div class="rounded-lg border bg-white mb-8">
                <div class="p-6 border-b">
                    <h2 class="text-lg font-semibold">Top Performing Items</h2>
                </div>
                <div class="p-6">
                    <table class="w-full">
                        <thead>
                            <tr class="border-b">
                                <th class="text-left pb-4">Item</th>
                                <th class="text-right pb-4">Orders</th>
                                <th class="text-right pb-4">Qty Sold</th>
                                <th class="text-right pb-4">Revenue</th>
                                <th class="text-right pb-4">Avg. Price</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in topItems)
                            {
                                <tr class="border-b last:border-0">
                                    <td class="py-4">
                                        <div class="font-medium">@item.Name</div>
                                        <div class="text-sm text-muted-foreground">@item.Category</div>
                                    </td>
                                    <td class="py-4 text-right">@item.OrderCount</td>
                                    <td class="py-4 text-right">@item.QuantitySold</td>
                                    <td class="py-4 text-right">@item.Revenue.ToString("C")</td>
                                    <td class="py-4 text-right">@item.AveragePrice.ToString("C")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Category Performance -->
            <div class="rounded-lg border bg-white">
                <div class="p-6 border-b">
                    <h2 class="text-lg font-semibold">Category Performance</h2>
                </div>
                <div class="p-6">
                    <div class="space-y-6">
                        @foreach (var category in categoryMetrics.OrderByDescending(x => x.Revenue))
                        {
                            var percentage = totalRevenue > 0 ? (category.Revenue / totalRevenue * 100) : 0;
                            <div>
                                <div class="flex justify-between mb-2">
                                    <div>
                                        <div class="font-medium">@category.Category</div>
                                        <div class="text-sm text-muted-foreground">
                                            @category.ItemCount items, @category.OrderCount orders
                                        </div>
                                    </div>
                                    <div class="text-right">
                                        <div class="font-medium">@category.Revenue.ToString("C")</div>
                                        <div class="text-sm text-muted-foreground">
                                            @percentage.ToString("F1")% of total revenue
                                        </div>
                                    </div>
                                </div>
                                <div class="w-full bg-gray-100 rounded-full h-2">
                                    <div class="bg-primary rounded-full h-2" style="width: @percentage%"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private string selectedPeriod = "30";
    private List<ItemMetric> topItems = new();
    private List<CategoryMetric> categoryMetrics = new();
    private decimal totalRevenue;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var orders = await Service.GetOrdersAsync();

            // Filter by selected period
            if (int.Parse(selectedPeriod) > 0)
            {
                var cutoffDate = DateTime.UtcNow.AddDays(-int.Parse(selectedPeriod));
                orders = orders.Where(o => o.OrderDate >= cutoffDate).ToList();
            }

            // Calculate item metrics
            topItems = orders
                .SelectMany(o => o.Items)
                .GroupBy(i => new { i.MenuItem?.Id, i.MenuItem?.Name, i.MenuItem?.Category })
                .Where(g => g.Key.Id != null && g.Key.Name != null)
                .Select(g => new ItemMetric
                    {
                        Name = g.Key.Name!,
                        Category = g.Key.Category ?? "Uncategorized",
                        OrderCount = g.Select(i => i.OrderId).Distinct().Count(),
                        QuantitySold = g.Sum(i => i.Quantity),
                        Revenue = g.Sum(i => i.Quantity * i.UnitPrice),
                        AveragePrice = g.Average(i => i.UnitPrice)
                    })
                .OrderByDescending(x => x.Revenue)
                .Take(10)
                .ToList();

            // Calculate category metrics
            categoryMetrics = orders
                .SelectMany(o => o.Items)
                .GroupBy(i => i.MenuItem?.Category ?? "Uncategorized")
                .Select(g => new CategoryMetric
                    {
                        Category = g.Key,
                        ItemCount = g.Select(i => i.MenuItemId).Distinct().Count(),
                        OrderCount = g.Select(i => i.OrderId).Distinct().Count(),
                        Revenue = g.Sum(i => i.Quantity * i.UnitPrice)
                    })
                .ToList();

            totalRevenue = categoryMetrics.Sum(c => c.Revenue);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private class ItemMetric
    {
        public string Name { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public int OrderCount { get; set; }
        public int QuantitySold { get; set; }
        public decimal Revenue { get; set; }
        public decimal AveragePrice { get; set; }
    }

    private class CategoryMetric
    {
        public string Category { get; set; } = string.Empty;
        public int ItemCount { get; set; }
        public int OrderCount { get; set; }
        public decimal Revenue { get; set; }
    }
}